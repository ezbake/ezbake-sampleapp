/*   Copyright (C) 2013-2014 Computer Sciences Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. */

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ezbake.app.sample.thrift;

import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Extracted and normalized information from the tweet JSON from the Twitter REST API
 */
public class Tweet implements org.apache.thrift.TBase<Tweet, Tweet._Fields>, java.io.Serializable, Cloneable, Comparable<Tweet> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Tweet");

  private static final org.apache.thrift.protocol.TField RAW_JSON_FIELD_DESC = new org.apache.thrift.protocol.TField("rawJson", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField IMAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("images", org.apache.thrift.protocol.TType.MAP, (short)2);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField AUTHOR_FIELD_DESC = new org.apache.thrift.protocol.TField("author", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField MENTIONED_USERS_FIELD_DESC = new org.apache.thrift.protocol.TField("mentionedUsers", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField RETWEETED_FIELD_DESC = new org.apache.thrift.protocol.TField("retweeted", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField REPLIED_TO_FIELD_DESC = new org.apache.thrift.protocol.TField("repliedTo", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField PROVENANCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("provenanceId", org.apache.thrift.protocol.TType.I64, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TweetStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TweetTupleSchemeFactory());
  }

  /**
   * Raw JSON from Twitter API. New keys may be added for application-specific purposes
   */
  public String rawJson; // required
  /**
   * Map of EzBake image IDs to Image (with binary, etc.)
   */
  public Map<String,ezbake.services.extractor.imagemetadata.thrift.Image> images; // required
  /**
   * Tweet ID
   */
  public String id; // required
  /**
   * User info of the author of the tweet
   */
  public TwitterUser author; // required
  /**
   * Info for the users mentioned by this tweet in its text
   */
  public List<TwitterUser> mentionedUsers; // required
  /**
   * Info for the tweet that was retweeted, if applicable
   */
  public ReferencedTweet retweeted; // optional
  /**
   * Info for the tweet to which this tweet was a reply, if applicable
   */
  public ReferencedTweet repliedTo; // optional
  /**
   * Provenance ID for the tweet
   */
  public long provenanceId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * Raw JSON from Twitter API. New keys may be added for application-specific purposes
     */
    RAW_JSON((short)1, "rawJson"),
    /**
     * Map of EzBake image IDs to Image (with binary, etc.)
     */
    IMAGES((short)2, "images"),
    /**
     * Tweet ID
     */
    ID((short)3, "id"),
    /**
     * User info of the author of the tweet
     */
    AUTHOR((short)4, "author"),
    /**
     * Info for the users mentioned by this tweet in its text
     */
    MENTIONED_USERS((short)5, "mentionedUsers"),
    /**
     * Info for the tweet that was retweeted, if applicable
     */
    RETWEETED((short)6, "retweeted"),
    /**
     * Info for the tweet to which this tweet was a reply, if applicable
     */
    REPLIED_TO((short)7, "repliedTo"),
    /**
     * Provenance ID for the tweet
     */
    PROVENANCE_ID((short)8, "provenanceId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RAW_JSON
          return RAW_JSON;
        case 2: // IMAGES
          return IMAGES;
        case 3: // ID
          return ID;
        case 4: // AUTHOR
          return AUTHOR;
        case 5: // MENTIONED_USERS
          return MENTIONED_USERS;
        case 6: // RETWEETED
          return RETWEETED;
        case 7: // REPLIED_TO
          return REPLIED_TO;
        case 8: // PROVENANCE_ID
          return PROVENANCE_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PROVENANCEID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.RETWEETED,_Fields.REPLIED_TO};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RAW_JSON, new org.apache.thrift.meta_data.FieldMetaData("rawJson", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IMAGES, new org.apache.thrift.meta_data.FieldMetaData("images", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "Image"))));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AUTHOR, new org.apache.thrift.meta_data.FieldMetaData("author", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TwitterUser.class)));
    tmpMap.put(_Fields.MENTIONED_USERS, new org.apache.thrift.meta_data.FieldMetaData("mentionedUsers", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TwitterUser.class))));
    tmpMap.put(_Fields.RETWEETED, new org.apache.thrift.meta_data.FieldMetaData("retweeted", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReferencedTweet.class)));
    tmpMap.put(_Fields.REPLIED_TO, new org.apache.thrift.meta_data.FieldMetaData("repliedTo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReferencedTweet.class)));
    tmpMap.put(_Fields.PROVENANCE_ID, new org.apache.thrift.meta_data.FieldMetaData("provenanceId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Tweet.class, metaDataMap);
  }

  public Tweet() {
  }

  public Tweet(
    String rawJson,
    Map<String,ezbake.services.extractor.imagemetadata.thrift.Image> images,
    String id,
    TwitterUser author,
    List<TwitterUser> mentionedUsers,
    long provenanceId)
  {
    this();
    this.rawJson = rawJson;
    this.images = images;
    this.id = id;
    this.author = author;
    this.mentionedUsers = mentionedUsers;
    this.provenanceId = provenanceId;
    setProvenanceIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Tweet(Tweet other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetRawJson()) {
      this.rawJson = other.rawJson;
    }
    if (other.isSetImages()) {
      Map<String,ezbake.services.extractor.imagemetadata.thrift.Image> __this__images = new HashMap<String,ezbake.services.extractor.imagemetadata.thrift.Image>(other.images.size());
      for (Map.Entry<String, ezbake.services.extractor.imagemetadata.thrift.Image> other_element : other.images.entrySet()) {

        String other_element_key = other_element.getKey();
        ezbake.services.extractor.imagemetadata.thrift.Image other_element_value = other_element.getValue();

        String __this__images_copy_key = other_element_key;

        ezbake.services.extractor.imagemetadata.thrift.Image __this__images_copy_value = other_element_value;

        __this__images.put(__this__images_copy_key, __this__images_copy_value);
      }
      this.images = __this__images;
    }
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetAuthor()) {
      this.author = new TwitterUser(other.author);
    }
    if (other.isSetMentionedUsers()) {
      List<TwitterUser> __this__mentionedUsers = new ArrayList<TwitterUser>(other.mentionedUsers.size());
      for (TwitterUser other_element : other.mentionedUsers) {
        __this__mentionedUsers.add(new TwitterUser(other_element));
      }
      this.mentionedUsers = __this__mentionedUsers;
    }
    if (other.isSetRetweeted()) {
      this.retweeted = new ReferencedTweet(other.retweeted);
    }
    if (other.isSetRepliedTo()) {
      this.repliedTo = new ReferencedTweet(other.repliedTo);
    }
    this.provenanceId = other.provenanceId;
  }

  public Tweet deepCopy() {
    return new Tweet(this);
  }

  @Override
  public void clear() {
    this.rawJson = null;
    this.images = null;
    this.id = null;
    this.author = null;
    this.mentionedUsers = null;
    this.retweeted = null;
    this.repliedTo = null;
    setProvenanceIdIsSet(false);
    this.provenanceId = 0;
  }

  /**
   * Raw JSON from Twitter API. New keys may be added for application-specific purposes
   */
  public String getRawJson() {
    return this.rawJson;
  }

  /**
   * Raw JSON from Twitter API. New keys may be added for application-specific purposes
   */
  public Tweet setRawJson(String rawJson) {
    this.rawJson = rawJson;
    return this;
  }

  public void unsetRawJson() {
    this.rawJson = null;
  }

  /** Returns true if field rawJson is set (has been assigned a value) and false otherwise */
  public boolean isSetRawJson() {
    return this.rawJson != null;
  }

  public void setRawJsonIsSet(boolean value) {
    if (!value) {
      this.rawJson = null;
    }
  }

  public int getImagesSize() {
    return (this.images == null) ? 0 : this.images.size();
  }

  public void putToImages(String key, ezbake.services.extractor.imagemetadata.thrift.Image val) {
    if (this.images == null) {
      this.images = new HashMap<String,ezbake.services.extractor.imagemetadata.thrift.Image>();
    }
    this.images.put(key, val);
  }

  /**
   * Map of EzBake image IDs to Image (with binary, etc.)
   */
  public Map<String,ezbake.services.extractor.imagemetadata.thrift.Image> getImages() {
    return this.images;
  }

  /**
   * Map of EzBake image IDs to Image (with binary, etc.)
   */
  public Tweet setImages(Map<String,ezbake.services.extractor.imagemetadata.thrift.Image> images) {
    this.images = images;
    return this;
  }

  public void unsetImages() {
    this.images = null;
  }

  /** Returns true if field images is set (has been assigned a value) and false otherwise */
  public boolean isSetImages() {
    return this.images != null;
  }

  public void setImagesIsSet(boolean value) {
    if (!value) {
      this.images = null;
    }
  }

  /**
   * Tweet ID
   */
  public String getId() {
    return this.id;
  }

  /**
   * Tweet ID
   */
  public Tweet setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  /**
   * User info of the author of the tweet
   */
  public TwitterUser getAuthor() {
    return this.author;
  }

  /**
   * User info of the author of the tweet
   */
  public Tweet setAuthor(TwitterUser author) {
    this.author = author;
    return this;
  }

  public void unsetAuthor() {
    this.author = null;
  }

  /** Returns true if field author is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthor() {
    return this.author != null;
  }

  public void setAuthorIsSet(boolean value) {
    if (!value) {
      this.author = null;
    }
  }

  public int getMentionedUsersSize() {
    return (this.mentionedUsers == null) ? 0 : this.mentionedUsers.size();
  }

  public java.util.Iterator<TwitterUser> getMentionedUsersIterator() {
    return (this.mentionedUsers == null) ? null : this.mentionedUsers.iterator();
  }

  public void addToMentionedUsers(TwitterUser elem) {
    if (this.mentionedUsers == null) {
      this.mentionedUsers = new ArrayList<TwitterUser>();
    }
    this.mentionedUsers.add(elem);
  }

  /**
   * Info for the users mentioned by this tweet in its text
   */
  public List<TwitterUser> getMentionedUsers() {
    return this.mentionedUsers;
  }

  /**
   * Info for the users mentioned by this tweet in its text
   */
  public Tweet setMentionedUsers(List<TwitterUser> mentionedUsers) {
    this.mentionedUsers = mentionedUsers;
    return this;
  }

  public void unsetMentionedUsers() {
    this.mentionedUsers = null;
  }

  /** Returns true if field mentionedUsers is set (has been assigned a value) and false otherwise */
  public boolean isSetMentionedUsers() {
    return this.mentionedUsers != null;
  }

  public void setMentionedUsersIsSet(boolean value) {
    if (!value) {
      this.mentionedUsers = null;
    }
  }

  /**
   * Info for the tweet that was retweeted, if applicable
   */
  public ReferencedTweet getRetweeted() {
    return this.retweeted;
  }

  /**
   * Info for the tweet that was retweeted, if applicable
   */
  public Tweet setRetweeted(ReferencedTweet retweeted) {
    this.retweeted = retweeted;
    return this;
  }

  public void unsetRetweeted() {
    this.retweeted = null;
  }

  /** Returns true if field retweeted is set (has been assigned a value) and false otherwise */
  public boolean isSetRetweeted() {
    return this.retweeted != null;
  }

  public void setRetweetedIsSet(boolean value) {
    if (!value) {
      this.retweeted = null;
    }
  }

  /**
   * Info for the tweet to which this tweet was a reply, if applicable
   */
  public ReferencedTweet getRepliedTo() {
    return this.repliedTo;
  }

  /**
   * Info for the tweet to which this tweet was a reply, if applicable
   */
  public Tweet setRepliedTo(ReferencedTweet repliedTo) {
    this.repliedTo = repliedTo;
    return this;
  }

  public void unsetRepliedTo() {
    this.repliedTo = null;
  }

  /** Returns true if field repliedTo is set (has been assigned a value) and false otherwise */
  public boolean isSetRepliedTo() {
    return this.repliedTo != null;
  }

  public void setRepliedToIsSet(boolean value) {
    if (!value) {
      this.repliedTo = null;
    }
  }

  /**
   * Provenance ID for the tweet
   */
  public long getProvenanceId() {
    return this.provenanceId;
  }

  /**
   * Provenance ID for the tweet
   */
  public Tweet setProvenanceId(long provenanceId) {
    this.provenanceId = provenanceId;
    setProvenanceIdIsSet(true);
    return this;
  }

  public void unsetProvenanceId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROVENANCEID_ISSET_ID);
  }

  /** Returns true if field provenanceId is set (has been assigned a value) and false otherwise */
  public boolean isSetProvenanceId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROVENANCEID_ISSET_ID);
  }

  public void setProvenanceIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROVENANCEID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RAW_JSON:
      if (value == null) {
        unsetRawJson();
      } else {
        setRawJson((String)value);
      }
      break;

    case IMAGES:
      if (value == null) {
        unsetImages();
      } else {
        setImages((Map<String,ezbake.services.extractor.imagemetadata.thrift.Image>)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case AUTHOR:
      if (value == null) {
        unsetAuthor();
      } else {
        setAuthor((TwitterUser)value);
      }
      break;

    case MENTIONED_USERS:
      if (value == null) {
        unsetMentionedUsers();
      } else {
        setMentionedUsers((List<TwitterUser>)value);
      }
      break;

    case RETWEETED:
      if (value == null) {
        unsetRetweeted();
      } else {
        setRetweeted((ReferencedTweet)value);
      }
      break;

    case REPLIED_TO:
      if (value == null) {
        unsetRepliedTo();
      } else {
        setRepliedTo((ReferencedTweet)value);
      }
      break;

    case PROVENANCE_ID:
      if (value == null) {
        unsetProvenanceId();
      } else {
        setProvenanceId((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RAW_JSON:
      return getRawJson();

    case IMAGES:
      return getImages();

    case ID:
      return getId();

    case AUTHOR:
      return getAuthor();

    case MENTIONED_USERS:
      return getMentionedUsers();

    case RETWEETED:
      return getRetweeted();

    case REPLIED_TO:
      return getRepliedTo();

    case PROVENANCE_ID:
      return Long.valueOf(getProvenanceId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RAW_JSON:
      return isSetRawJson();
    case IMAGES:
      return isSetImages();
    case ID:
      return isSetId();
    case AUTHOR:
      return isSetAuthor();
    case MENTIONED_USERS:
      return isSetMentionedUsers();
    case RETWEETED:
      return isSetRetweeted();
    case REPLIED_TO:
      return isSetRepliedTo();
    case PROVENANCE_ID:
      return isSetProvenanceId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Tweet)
      return this.equals((Tweet)that);
    return false;
  }

  public boolean equals(Tweet that) {
    if (that == null)
      return false;

    boolean this_present_rawJson = true && this.isSetRawJson();
    boolean that_present_rawJson = true && that.isSetRawJson();
    if (this_present_rawJson || that_present_rawJson) {
      if (!(this_present_rawJson && that_present_rawJson))
        return false;
      if (!this.rawJson.equals(that.rawJson))
        return false;
    }

    boolean this_present_images = true && this.isSetImages();
    boolean that_present_images = true && that.isSetImages();
    if (this_present_images || that_present_images) {
      if (!(this_present_images && that_present_images))
        return false;
      if (!this.images.equals(that.images))
        return false;
    }

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_author = true && this.isSetAuthor();
    boolean that_present_author = true && that.isSetAuthor();
    if (this_present_author || that_present_author) {
      if (!(this_present_author && that_present_author))
        return false;
      if (!this.author.equals(that.author))
        return false;
    }

    boolean this_present_mentionedUsers = true && this.isSetMentionedUsers();
    boolean that_present_mentionedUsers = true && that.isSetMentionedUsers();
    if (this_present_mentionedUsers || that_present_mentionedUsers) {
      if (!(this_present_mentionedUsers && that_present_mentionedUsers))
        return false;
      if (!this.mentionedUsers.equals(that.mentionedUsers))
        return false;
    }

    boolean this_present_retweeted = true && this.isSetRetweeted();
    boolean that_present_retweeted = true && that.isSetRetweeted();
    if (this_present_retweeted || that_present_retweeted) {
      if (!(this_present_retweeted && that_present_retweeted))
        return false;
      if (!this.retweeted.equals(that.retweeted))
        return false;
    }

    boolean this_present_repliedTo = true && this.isSetRepliedTo();
    boolean that_present_repliedTo = true && that.isSetRepliedTo();
    if (this_present_repliedTo || that_present_repliedTo) {
      if (!(this_present_repliedTo && that_present_repliedTo))
        return false;
      if (!this.repliedTo.equals(that.repliedTo))
        return false;
    }

    boolean this_present_provenanceId = true;
    boolean that_present_provenanceId = true;
    if (this_present_provenanceId || that_present_provenanceId) {
      if (!(this_present_provenanceId && that_present_provenanceId))
        return false;
      if (this.provenanceId != that.provenanceId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_rawJson = true && (isSetRawJson());
    builder.append(present_rawJson);
    if (present_rawJson)
      builder.append(rawJson);

    boolean present_images = true && (isSetImages());
    builder.append(present_images);
    if (present_images)
      builder.append(images);

    boolean present_id = true && (isSetId());
    builder.append(present_id);
    if (present_id)
      builder.append(id);

    boolean present_author = true && (isSetAuthor());
    builder.append(present_author);
    if (present_author)
      builder.append(author);

    boolean present_mentionedUsers = true && (isSetMentionedUsers());
    builder.append(present_mentionedUsers);
    if (present_mentionedUsers)
      builder.append(mentionedUsers);

    boolean present_retweeted = true && (isSetRetweeted());
    builder.append(present_retweeted);
    if (present_retweeted)
      builder.append(retweeted);

    boolean present_repliedTo = true && (isSetRepliedTo());
    builder.append(present_repliedTo);
    if (present_repliedTo)
      builder.append(repliedTo);

    boolean present_provenanceId = true;
    builder.append(present_provenanceId);
    if (present_provenanceId)
      builder.append(provenanceId);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(Tweet other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetRawJson()).compareTo(other.isSetRawJson());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRawJson()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rawJson, other.rawJson);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImages()).compareTo(other.isSetImages());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImages()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.images, other.images);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuthor()).compareTo(other.isSetAuthor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.author, other.author);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMentionedUsers()).compareTo(other.isSetMentionedUsers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMentionedUsers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mentionedUsers, other.mentionedUsers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRetweeted()).compareTo(other.isSetRetweeted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRetweeted()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.retweeted, other.retweeted);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepliedTo()).compareTo(other.isSetRepliedTo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepliedTo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repliedTo, other.repliedTo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProvenanceId()).compareTo(other.isSetProvenanceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProvenanceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.provenanceId, other.provenanceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Tweet(");
    boolean first = true;

    sb.append("rawJson:");
    if (this.rawJson == null) {
      sb.append("null");
    } else {
      sb.append(this.rawJson);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("images:");
    if (this.images == null) {
      sb.append("null");
    } else {
      sb.append(this.images);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("author:");
    if (this.author == null) {
      sb.append("null");
    } else {
      sb.append(this.author);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mentionedUsers:");
    if (this.mentionedUsers == null) {
      sb.append("null");
    } else {
      sb.append(this.mentionedUsers);
    }
    first = false;
    if (isSetRetweeted()) {
      if (!first) sb.append(", ");
      sb.append("retweeted:");
      if (this.retweeted == null) {
        sb.append("null");
      } else {
        sb.append(this.retweeted);
      }
      first = false;
    }
    if (isSetRepliedTo()) {
      if (!first) sb.append(", ");
      sb.append("repliedTo:");
      if (this.repliedTo == null) {
        sb.append("null");
      } else {
        sb.append(this.repliedTo);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("provenanceId:");
    sb.append(this.provenanceId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (rawJson == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'rawJson' was not present! Struct: " + toString());
    }
    if (images == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'images' was not present! Struct: " + toString());
    }
    if (id == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' was not present! Struct: " + toString());
    }
    if (author == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'author' was not present! Struct: " + toString());
    }
    if (mentionedUsers == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'mentionedUsers' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'provenanceId' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (author != null) {
      author.validate();
    }
    if (retweeted != null) {
      retweeted.validate();
    }
    if (repliedTo != null) {
      repliedTo.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TweetStandardSchemeFactory implements SchemeFactory {
    public TweetStandardScheme getScheme() {
      return new TweetStandardScheme();
    }
  }

  private static class TweetStandardScheme extends StandardScheme<Tweet> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Tweet struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RAW_JSON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rawJson = iprot.readString();
              struct.setRawJsonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // IMAGES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.images = new HashMap<String,ezbake.services.extractor.imagemetadata.thrift.Image>(2*_map0.size);
                for (int _i1 = 0; _i1 < _map0.size; ++_i1)
                {
                  String _key2;
                  ezbake.services.extractor.imagemetadata.thrift.Image _val3;
                  _key2 = iprot.readString();
                  _val3 = new ezbake.services.extractor.imagemetadata.thrift.Image();
                  _val3.read(iprot);
                  struct.images.put(_key2, _val3);
                }
                iprot.readMapEnd();
              }
              struct.setImagesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // AUTHOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.author = new TwitterUser();
              struct.author.read(iprot);
              struct.setAuthorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MENTIONED_USERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list4 = iprot.readListBegin();
                struct.mentionedUsers = new ArrayList<TwitterUser>(_list4.size);
                for (int _i5 = 0; _i5 < _list4.size; ++_i5)
                {
                  TwitterUser _elem6;
                  _elem6 = new TwitterUser();
                  _elem6.read(iprot);
                  struct.mentionedUsers.add(_elem6);
                }
                iprot.readListEnd();
              }
              struct.setMentionedUsersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // RETWEETED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.retweeted = new ReferencedTweet();
              struct.retweeted.read(iprot);
              struct.setRetweetedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // REPLIED_TO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.repliedTo = new ReferencedTweet();
              struct.repliedTo.read(iprot);
              struct.setRepliedToIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PROVENANCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.provenanceId = iprot.readI64();
              struct.setProvenanceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetProvenanceId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'provenanceId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Tweet struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.rawJson != null) {
        oprot.writeFieldBegin(RAW_JSON_FIELD_DESC);
        oprot.writeString(struct.rawJson);
        oprot.writeFieldEnd();
      }
      if (struct.images != null) {
        oprot.writeFieldBegin(IMAGES_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.images.size()));
          for (Map.Entry<String, ezbake.services.extractor.imagemetadata.thrift.Image> _iter7 : struct.images.entrySet())
          {
            oprot.writeString(_iter7.getKey());
            _iter7.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.author != null) {
        oprot.writeFieldBegin(AUTHOR_FIELD_DESC);
        struct.author.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.mentionedUsers != null) {
        oprot.writeFieldBegin(MENTIONED_USERS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.mentionedUsers.size()));
          for (TwitterUser _iter8 : struct.mentionedUsers)
          {
            _iter8.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.retweeted != null) {
        if (struct.isSetRetweeted()) {
          oprot.writeFieldBegin(RETWEETED_FIELD_DESC);
          struct.retweeted.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.repliedTo != null) {
        if (struct.isSetRepliedTo()) {
          oprot.writeFieldBegin(REPLIED_TO_FIELD_DESC);
          struct.repliedTo.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(PROVENANCE_ID_FIELD_DESC);
      oprot.writeI64(struct.provenanceId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TweetTupleSchemeFactory implements SchemeFactory {
    public TweetTupleScheme getScheme() {
      return new TweetTupleScheme();
    }
  }

  private static class TweetTupleScheme extends TupleScheme<Tweet> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Tweet struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.rawJson);
      {
        oprot.writeI32(struct.images.size());
        for (Map.Entry<String, ezbake.services.extractor.imagemetadata.thrift.Image> _iter9 : struct.images.entrySet())
        {
          oprot.writeString(_iter9.getKey());
          _iter9.getValue().write(oprot);
        }
      }
      oprot.writeString(struct.id);
      struct.author.write(oprot);
      {
        oprot.writeI32(struct.mentionedUsers.size());
        for (TwitterUser _iter10 : struct.mentionedUsers)
        {
          _iter10.write(oprot);
        }
      }
      oprot.writeI64(struct.provenanceId);
      BitSet optionals = new BitSet();
      if (struct.isSetRetweeted()) {
        optionals.set(0);
      }
      if (struct.isSetRepliedTo()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetRetweeted()) {
        struct.retweeted.write(oprot);
      }
      if (struct.isSetRepliedTo()) {
        struct.repliedTo.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Tweet struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.rawJson = iprot.readString();
      struct.setRawJsonIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map11 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.images = new HashMap<String,ezbake.services.extractor.imagemetadata.thrift.Image>(2*_map11.size);
        for (int _i12 = 0; _i12 < _map11.size; ++_i12)
        {
          String _key13;
          ezbake.services.extractor.imagemetadata.thrift.Image _val14;
          _key13 = iprot.readString();
          _val14 = new ezbake.services.extractor.imagemetadata.thrift.Image();
          _val14.read(iprot);
          struct.images.put(_key13, _val14);
        }
      }
      struct.setImagesIsSet(true);
      struct.id = iprot.readString();
      struct.setIdIsSet(true);
      struct.author = new TwitterUser();
      struct.author.read(iprot);
      struct.setAuthorIsSet(true);
      {
        org.apache.thrift.protocol.TList _list15 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.mentionedUsers = new ArrayList<TwitterUser>(_list15.size);
        for (int _i16 = 0; _i16 < _list15.size; ++_i16)
        {
          TwitterUser _elem17;
          _elem17 = new TwitterUser();
          _elem17.read(iprot);
          struct.mentionedUsers.add(_elem17);
        }
      }
      struct.setMentionedUsersIsSet(true);
      struct.provenanceId = iprot.readI64();
      struct.setProvenanceIdIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.retweeted = new ReferencedTweet();
        struct.retweeted.read(iprot);
        struct.setRetweetedIsSet(true);
      }
      if (incoming.get(1)) {
        struct.repliedTo = new ReferencedTweet();
        struct.repliedTo.read(iprot);
        struct.setRepliedToIsSet(true);
      }
    }
  }

}

